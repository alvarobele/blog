<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Álvaro Beleño</title>
    <link>/blog/</link>
    <description>Recent content on Álvaro Beleño</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 26 Jan 2019 15:28:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Diferencias de PostgreSQL y MariaDB respecto a ORACLE en cuanto a la gestión del almacenamiento</title>
      <link>/blog/post/diferenciasalmacenamiento/</link>
      <pubDate>Sat, 26 Jan 2019 15:28:00 +0000</pubDate>
      
      <guid>/blog/post/diferenciasalmacenamiento/</guid>
      <description>MariaDB, MySQL En MariaDB no tenemos disponible la opción de crear tablespaces. A partir de la versión 4.0 de MySQL se incluye InnoDB, que es un motor de almacenamiento, cuyo predecesor fue MyISAM (actualmente en desuso debido a la gran superioridad de InnoDB), el cual sí incluye esta funcionalidad.
En MySQL tenemos dos opciones para crear los tablespaces; con el motor de almacenamiento InnoDB y, por otro lado, con NDB.</description>
    </item>
    
    <item>
      <title>Integración Continua - Construyendo un blog con Hugo, Travis y GitHub Pages</title>
      <link>/blog/post/bloghugoic/</link>
      <pubDate>Wed, 23 Jan 2019 15:28:00 +0000</pubDate>
      
      <guid>/blog/post/bloghugoic/</guid>
      <description>En esta entrada veremos cómo crear un blog como este mismo, usando integración continua con las herramientas Hugo, Travis y GitHub Pages. Cuando ya tengamos todo configurado, lo único que tendremos que hacer es escribir nuestros posts en Markdown, hacer un push a nuestro repositorio en GitHub y las tres herramientas anteriormente mencionadas se encargarán del resto :)
Primero, creamos el repositorio GitHub y en él crearemos la rama gh-pages, donde estarán los ficheros generados por Hugo, mientras que en la rama master será donde tendremos los ficheros Markdown, así como el fichero .</description>
    </item>
    
    <item>
      <title>Btrfs, parte 1</title>
      <link>/blog/post/btrfs1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/blog/post/btrfs1/</guid>
      <description>Btrfs
Escenario Para estas pruebas vamos a disponer de una máquina Debian con tres discos asociados a la misma. Estos discos tienen diferentes tamaños, siendo uno de 1 GB, otro de 2 GB y el último de 3 GB.
Gestión de los discos adicionales Para formatear un disco con el sistema de ficheros Btrfs, ejecutaremos el siguiente comando:
mkfs.btrfs /dev/sdc  Como podemos ver, he formateado el disco sin hacer particiones previamente.</description>
    </item>
    
  </channel>
</rss>