<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Álvaro Beleño</title>
    <link>/blog/post/</link>
    <description>Recent content in Posts on Álvaro Beleño</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 22 Jan 2021 15:28:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Crear un CronJob para reiniciar deployment en AKS</title>
      <link>/blog/post/cronjobaks/</link>
      <pubDate>Fri, 22 Jan 2021 15:28:00 +0000</pubDate>
      
      <guid>/blog/post/cronjobaks/</guid>
      <description>Tras estar bastante tiempo sin subir un post, he decidido subir cosas interesantes que haga en mi trabajo que considere que pueden ser útiles o que, simplemente, quiera tener en algún sitio y así no perderlo de vista :)
Hoy os hablaré de cómo crear un recurso cronJob en AKS para manejar el reinicio de uno (O varios) deployments. Realmente esto se podría hacer en cualquier instancia de Kubernetes, con lo cual no aplica sólo a la plataforma de Azure.</description>
    </item>
    
    <item>
      <title>Btrfs, parte 2</title>
      <link>/blog/post/btrfs2/</link>
      <pubDate>Tue, 19 Mar 2019 08:00:00 +0000</pubDate>
      
      <guid>/blog/post/btrfs2/</guid>
      <description>Esta es la segunda parte de mis posts sobre Btrfs, para leer la primera, ve aquí
Otras funcionalidades Compresión Cuando montamos el disco de manera normal, no usará ningún tipo de compresión por defecto. Para poder empezar a utilizar la compresión, tendremos que indicar qué método de compresión es el que deseamos utilizar. Esto lo haremos de la siguiente manera:
mount -o compress=&amp;lt;método de compresión&amp;gt; /dev/sdb /mnt  Contamos con varios métodos de compresión en Btrfs: * ZLIB: Gran ratio de compresión, pero lento.</description>
    </item>
    
    <item>
      <title>Btrfs, parte 1</title>
      <link>/blog/post/btrfs1/</link>
      <pubDate>Fri, 15 Mar 2019 08:00:00 +0000</pubDate>
      
      <guid>/blog/post/btrfs1/</guid>
      <description>Btrfs es un sistema de ficheros copy on write (CoW) para Linux que implementa funcionalidades avanzadas concentrándose también en tolerancia a fallos, reparación y su fácil administración.
Escenario Para estas pruebas vamos a disponer de una máquina Debian con tres discos asociados a la misma. Estos discos tienen diferentes tamaños, siendo uno de 1 GB, otro de 2 GB y el último de 3 GB.
Gestión de los discos adicionales Para formatear un disco con el sistema de ficheros Btrfs, ejecutaremos el siguiente comando:</description>
    </item>
    
    <item>
      <title>Integración Continua - Construyendo un blog con Hugo, Travis y GitHub Pages</title>
      <link>/blog/post/bloghugoic/</link>
      <pubDate>Wed, 23 Jan 2019 15:28:00 +0000</pubDate>
      
      <guid>/blog/post/bloghugoic/</guid>
      <description>En esta entrada veremos cómo crear un blog como este mismo, usando integración continua con las herramientas Hugo, Travis y GitHub Pages. Cuando ya tengamos todo configurado, lo único que tendremos que hacer es escribir nuestros posts en Markdown, hacer un push a nuestro repositorio en GitHub y las tres herramientas anteriormente mencionadas se encargarán del resto :)
Primero, creamos el repositorio GitHub y en él crearemos la rama gh-pages, donde estarán los ficheros generados por Hugo, mientras que en la rama master será donde tendremos los ficheros Markdown, así como el fichero .</description>
    </item>
    
  </channel>
</rss>